"""Create all database models

Revision ID: e4edd72f194f
Revises: 
Create Date: 2025-08-20 13:09:24.841239

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'e4edd72f194f'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('employee_id', sa.String(length=50), nullable=False, comment='Employee ID from Jira (used as username)'),
    sa.Column('name', sa.String(length=100), nullable=False, comment='Full name from Jira user profile'),
    sa.Column('email', sa.String(length=255), nullable=False, comment='Email address from Jira user profile'),
    sa.Column('display_name', sa.String(length=100), nullable=False, comment='Display name from Jira user profile'),
    sa.Column('hashed_password', sa.String(length=255), nullable=False, comment='Bcrypt hashed password'),
    sa.Column('encrypted_jira_pat', sa.Text(), nullable=False, comment='AES-256 encrypted Jira Personal Access Token'),
    sa.Column('jira_url', sa.String(length=500), nullable=False, comment='Base Jira URL extracted from /myself API response'),
    sa.Column('avatar_url', sa.String(length=500), nullable=True, comment='Avatar URL from Jira user profile (48x48)'),
    sa.Column('active', sa.Boolean(), nullable=False, comment='User account active status'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_employee_id'), 'users', ['employee_id'], unique=True)
    op.create_table('background_jobs',
    sa.Column('user_id', sa.Integer(), nullable=False, comment='Reference to the user who owns this job'),
    sa.Column('job_type', sa.String(length=50), nullable=False, comment='Type of background job (tool_refresh, ai_generation, etc.)'),
    sa.Column('job_id', sa.String(length=100), nullable=True, comment='Unique job identifier from Huey'),
    sa.Column('payload', sa.Text(), nullable=True, comment='JSON serialized job payload/parameters'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Job status (pending, running, completed, failed, cancelled)'),
    sa.Column('result', sa.Text(), nullable=True, comment='JSON serialized job result or error information'),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when job execution started'),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when job execution completed'),
    sa.Column('retry_count', sa.Integer(), nullable=False, comment='Number of retry attempts'),
    sa.Column('max_retries', sa.Integer(), nullable=False, comment='Maximum number of retry attempts'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='Error message if job failed'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_background_jobs_job_id'), 'background_jobs', ['job_id'], unique=True)
    op.create_index(op.f('ix_background_jobs_job_type'), 'background_jobs', ['job_type'], unique=False)
    op.create_index(op.f('ix_background_jobs_status'), 'background_jobs', ['status'], unique=False)
    op.create_index(op.f('ix_background_jobs_user_id'), 'background_jobs', ['user_id'], unique=False)
    op.create_table('confluence_configs',
    sa.Column('user_id', sa.Integer(), nullable=False, comment='Reference to the user who owns this configuration'),
    sa.Column('url', sa.String(length=500), nullable=False, comment='Confluence base URL (≥150 characters)'),
    sa.Column('encrypted_pat', sa.Text(), nullable=False, comment='AES-256 encrypted Confluence Personal Access Token (≤20 chars)'),
    sa.Column('verify_ssl', sa.Boolean(), nullable=False, comment='Whether to verify SSL certificates'),
    sa.Column('ssl_cert_path', sa.String(length=500), nullable=True, comment='Path to SSL certificate file (when verify_ssl is True)'),
    sa.Column('tested_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when configuration was last successfully tested'),
    sa.Column('test_username', sa.String(length=100), nullable=True, comment='Username returned from successful test (for employee ID validation)'),
    sa.Column('test_user_key', sa.String(length=100), nullable=True, comment='User key returned from successful test'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_confluence_configs_user_id'), 'confluence_configs', ['user_id'], unique=True)
    op.create_table('llm_configs',
    sa.Column('user_id', sa.Integer(), nullable=False, comment='Reference to the user who owns this configuration'),
    sa.Column('encrypted_cookie', sa.Text(), nullable=False, comment='AES-256 encrypted cookie value for Custom LLM authentication'),
    sa.Column('tested_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when configuration was last successfully tested'),
    sa.Column('test_user_id', sa.String(length=100), nullable=True, comment='User ID returned from successful test (for validation)'),
    sa.Column('test_username', sa.String(length=100), nullable=True, comment='Username returned from successful test (for validation)'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_llm_configs_user_id'), 'llm_configs', ['user_id'], unique=True)
    op.create_table('tool_cache',
    sa.Column('user_id', sa.Integer(), nullable=False, comment='Reference to the user who owns this cache entry'),
    sa.Column('source', sa.String(length=20), nullable=False, comment='Source of the tools (jira, confluence)'),
    sa.Column('tool_data', sa.Text(), nullable=False, comment='JSON serialized tool list data'),
    sa.Column('refreshed_at', sa.DateTime(timezone=True), nullable=False, comment='Timestamp when cache was last refreshed'),
    sa.Column('ttl_seconds', sa.Integer(), nullable=False, comment='Time-to-live in seconds (default 6 hours)'),
    sa.Column('hit_count', sa.Integer(), nullable=False, comment='Number of times this cache entry has been accessed'),
    sa.Column('last_accessed_at', sa.DateTime(timezone=True), nullable=True, comment='Timestamp when cache was last accessed'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tool_cache_user_id'), 'tool_cache', ['user_id'], unique=False)
    op.create_table('user_sessions',
    sa.Column('user_id', sa.Integer(), nullable=False, comment='Reference to the user who owns this session'),
    sa.Column('token_hash', sa.String(length=255), nullable=False, comment='SHA-256 hash of the JWT token'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False, comment='Session expiration timestamp'),
    sa.Column('user_agent', sa.Text(), nullable=True, comment='User agent string from session creation'),
    sa.Column('ip_address', sa.String(length=45), nullable=True, comment='IP address from session creation'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_sessions_expires_at'), 'user_sessions', ['expires_at'], unique=False)
    op.create_index(op.f('ix_user_sessions_token_hash'), 'user_sessions', ['token_hash'], unique=True)
    op.create_index(op.f('ix_user_sessions_user_id'), 'user_sessions', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_sessions_user_id'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_token_hash'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_expires_at'), table_name='user_sessions')
    op.drop_table('user_sessions')
    op.drop_index(op.f('ix_tool_cache_user_id'), table_name='tool_cache')
    op.drop_table('tool_cache')
    op.drop_index(op.f('ix_llm_configs_user_id'), table_name='llm_configs')
    op.drop_table('llm_configs')
    op.drop_index(op.f('ix_confluence_configs_user_id'), table_name='confluence_configs')
    op.drop_table('confluence_configs')
    op.drop_index(op.f('ix_background_jobs_user_id'), table_name='background_jobs')
    op.drop_index(op.f('ix_background_jobs_status'), table_name='background_jobs')
    op.drop_index(op.f('ix_background_jobs_job_type'), table_name='background_jobs')
    op.drop_index(op.f('ix_background_jobs_job_id'), table_name='background_jobs')
    op.drop_table('background_jobs')
    op.drop_index(op.f('ix_users_employee_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###